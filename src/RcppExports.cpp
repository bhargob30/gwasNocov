// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// V_lambda_tau
arma::mat V_lambda_tau(arma::mat K, arma::vec log_lambda_tau);
RcppExport SEXP _gwasNocov_V_lambda_tau(SEXP KSEXP, SEXP log_lambda_tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type log_lambda_tau(log_lambda_tauSEXP);
    rcpp_result_gen = Rcpp::wrap(V_lambda_tau(K, log_lambda_tau));
    return rcpp_result_gen;
END_RCPP
}
// beta_tilda
arma::vec beta_tilda(arma::mat K, arma::vec x, arma::vec y, arma::vec log_lambda_tau);
RcppExport SEXP _gwasNocov_beta_tilda(SEXP KSEXP, SEXP xSEXP, SEXP ySEXP, SEXP log_lambda_tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type log_lambda_tau(log_lambda_tauSEXP);
    rcpp_result_gen = Rcpp::wrap(beta_tilda(K, x, y, log_lambda_tau));
    return rcpp_result_gen;
END_RCPP
}
// neglr_lambda_tau
double neglr_lambda_tau(arma::vec log_lambda_tau, arma::mat K, arma::vec x, arma::vec y);
RcppExport SEXP _gwasNocov_neglr_lambda_tau(SEXP log_lambda_tauSEXP, SEXP KSEXP, SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type log_lambda_tau(log_lambda_tauSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(neglr_lambda_tau(log_lambda_tau, K, x, y));
    return rcpp_result_gen;
END_RCPP
}
// beta_hat_sigma_hat
arma::vec beta_hat_sigma_hat(arma:: mat K, arma::vec x, arma::vec y, arma::vec log_lambda_tau_hat);
RcppExport SEXP _gwasNocov_beta_hat_sigma_hat(SEXP KSEXP, SEXP xSEXP, SEXP ySEXP, SEXP log_lambda_tau_hatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma:: mat >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type log_lambda_tau_hat(log_lambda_tau_hatSEXP);
    rcpp_result_gen = Rcpp::wrap(beta_hat_sigma_hat(K, x, y, log_lambda_tau_hat));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _gwasNocov_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _gwasNocov_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _gwasNocov_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _gwasNocov_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gwasNocov_V_lambda_tau", (DL_FUNC) &_gwasNocov_V_lambda_tau, 2},
    {"_gwasNocov_beta_tilda", (DL_FUNC) &_gwasNocov_beta_tilda, 4},
    {"_gwasNocov_neglr_lambda_tau", (DL_FUNC) &_gwasNocov_neglr_lambda_tau, 4},
    {"_gwasNocov_beta_hat_sigma_hat", (DL_FUNC) &_gwasNocov_beta_hat_sigma_hat, 4},
    {"_gwasNocov_rcpparma_hello_world", (DL_FUNC) &_gwasNocov_rcpparma_hello_world, 0},
    {"_gwasNocov_rcpparma_outerproduct", (DL_FUNC) &_gwasNocov_rcpparma_outerproduct, 1},
    {"_gwasNocov_rcpparma_innerproduct", (DL_FUNC) &_gwasNocov_rcpparma_innerproduct, 1},
    {"_gwasNocov_rcpparma_bothproducts", (DL_FUNC) &_gwasNocov_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_gwasNocov(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
